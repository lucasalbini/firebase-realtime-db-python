import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

# Fetch the service account key JSON file contents
cred = credentials.Certificate('robo-thermy.json')
# Initialize the app with a service account, granting admin privileges
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://robo-thermy.firebaseio.com/'
})

# Save data
ref = db.reference('/')
ref.set(
    {
    'informacoes': 
            {
                'id': {
                    'name': 'totem01',
                    'pos': 'lat: -25.4967922 // long: -49.3110747',
                    'date':'31/08/2020'
                },
                'monitoramento': {
                    'bateria': 80,
                    'status': 'ON'
                },
                'totem': {
                    'image': 'teste',
                    'temperature': 36.5,
                    'mask': 'yes',
                    'id_people': '09123812'
                },
            }
    }
)
'''
# Update data
ref = db.reference('boxes')
box_ref = ref.child('box001')
box_ref.update({
    'color': 'blue'
})

# Multi-path update data
ref = db.reference('boxes')
ref.update({
    'box001/color': 'red',
    'box002/color': 'blue'
})

# Save lists of data
ref = db.reference('boxes')
ref.push({
    'color': 'purple',
    'width': 7,
    'height': 8,
    'length': 6
})

# Get the Unique Key Generated by push()
ref = db.reference('boxes')
new_box_ref = ref.push({
    'color': 'purple',
    'width': 7,
    'height': 8,
    'length': 6
})
box_id = new_box_ref.key
print(box_id)

# Retrieving data
ref = db.reference('boxes')
print(ref.get())

# Querying Data

# Ordering by a specified child key
ref = db.reference('boxes')
snapshot = ref.order_by_child('height').get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Ordering by key
ref = db.reference('boxes')
snapshot = ref.order_by_key().get()
print(snapshot)

# Ordering by value
ref = db.reference('/')
ref.set(
    {
        "weights": {
            "person001" : 60,
            "person002" : 65,
            "person003" : 80,
            "person004" : 55,
            "person005" : 72
        }
    }
)
ref = db.reference('weights')
snapshot = ref.order_by_value().get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Limit Queries
ref = db.reference('boxes')
snapshot = ref.order_by_child('color').limit_to_last(2).get()
for key in snapshot:
    print(key)

snapshot = ref.order_by_child('color').limit_to_last(3).get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

weights_ref = db.reference('weights')
snapshot = weights_ref.order_by_value().limit_to_last(3).get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

# Range Queries
snapshot = ref.order_by_child('color').start_at('r').get()
for key, val in snapshot.items():
    print('{0} => {1}'.format(key, val))

ref = db.reference('boxes')
snapshot = ref.order_by_key().end_at('w').get()
for key in snapshot:
    print(key)

ref = db.reference('boxes')
snapshot = ref.order_by_key().start_at('g').end_at(u'n\uf8ff').get()
for key in snapshot:
    print(key)

ref = db.reference('boxes')
snapshot = ref.order_by_child('length').equal_to(3).get()
for key in snapshot:
    print(key)
'''